---
title: "Spaceship Titanic R"
format: html
editor: visual
---

```{r message = FALSE}
library(tidyverse)
library(tidymodels)
library(kableExtra)

data <- read_csv("https://raw.githubusercontent.com/agmath/agmath.github.io/master/data/classification/spaceship_titanic.csv")
```

## Modeling Workflow

```{r}
data_for_model <- data %>%
  mutate(Transported = as.factor(ifelse(Transported == TRUE, "yes", "no")))

#training and test sets
set.seed(123)
data_splits <- initial_split(data_for_model)
train <- training(data_splits)
test <- testing(data_splits)

#build cross-validation folds
set.seed(456)
train_folds <- vfold_cv(train, v = 10)

#Create a model specification
log_reg_spec <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

#Create a recipe
log_reg_rec <- recipe(Transported ~ ., data = train) %>%
  step_rm(PassengerId, Cabin, Name) %>%
  step_impute_median(all_numeric_predictors()) %>%
  step_impute_mode(all_nominal_predictors()) %>%
  step_dummy(all_nominal_predictors()) #add recipe steps as needed

#Create a workflow
log_reg_wf <- workflow() %>%
  add_model(log_reg_spec) %>%
  add_recipe(log_reg_rec)

#Run cross-validation to obtain cross-validation performance estimate
log_reg_cv_results <- log_reg_wf %>%
  fit_resamples(train_folds)

#Collect cross-validation results
log_reg_cv_results %>%
  collect_metrics()

#Fit model to training data
log_reg_fit <- log_reg_wf %>%
  fit(train)

#Assess model on test data
#my_metrics <- metric_set(accuracy, precision, recall)
log_reg_fit %>%
  augment(test) %>%
  #mutate(Transported = as.factor(Transported)) %>%
  accuracy(Transported, .pred_class)
```

## SVC

```{r}
#Create a model specification
svm_spec <- svm_linear() %>%
  set_engine("kernlab") %>%
  set_mode("classification")

#Create a recipe
svm_rec <- recipe(Transported ~ ., data = train) %>%
  step_rm(PassengerId, Cabin, Name, HomePlanet, Destination, CryoSleep, VIP) %>%
  step_impute_median(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors())

#Create a workflow
svm_wf <- workflow() %>%
  add_model(svm_spec) %>%
  add_recipe(svm_rec)

#Run cross-validation to obtain cross-validation performance estimate
svm_cv_results <- svm_wf %>%
  fit_resamples(train_folds)

#Collect cross-validation results
svm_cv_results %>%
  collect_metrics()

#Fit model to training data
svm_fit <- svm_wf %>%
  fit(train)

#Assess model on test data
#my_metrics <- metric_set(accuracy, precision, recall)
svm_fit %>%
  augment(test) %>%
  #mutate(Transported = as.factor(Transported)) %>%
  accuracy(Transported, .pred_class)
```
